// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	types "Go-Dispatch-Bootcamp/types"

	mock "github.com/stretchr/testify/mock"
)

// DemoService is an autogenerated mock type for the DemoService type
type DemoService struct {
	mock.Mock
}

// FetchCsvFromRemote provides a mock function with given fields: _a0
func (_m *DemoService) FetchCsvFromRemote(_a0 string) ([][]string, error) {
	ret := _m.Called(_a0)

	var r0 [][]string
	if rf, ok := ret.Get(0).(func(string) [][]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeedUsers provides a mock function with given fields: _a0
func (_m *DemoService) GetFeedUsers(_a0 string) ([][]string, error) {
	ret := _m.Called(_a0)

	var r0 [][]string
	if rf, ok := ret.Get(0).(func(string) [][]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: _a0
func (_m *DemoService) GetUsers(_a0 string) (*[]types.User, error) {
	ret := _m.Called(_a0)

	var r0 *[]types.User
	if rf, ok := ret.Get(0).(func(string) *[]types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersMap provides a mock function with given fields: _a0
func (_m *DemoService) GetUsersMap(_a0 string) (map[int]types.User, error) {
	ret := _m.Called(_a0)

	var r0 map[int]types.User
	if rf, ok := ret.Get(0).(func(string) map[int]types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsers provides a mock function with given fields: _a0, _a1
func (_m *DemoService) UpdateUsers(_a0 *[]types.User, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*[]types.User, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*[]types.User, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
